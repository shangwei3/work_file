#include "exynos_4412.h"
#include "uart.h"
 
void  delay_ms(unsigned int num)
{
    int i,j;
    for(i=num; i>0;i--)
	for(j=1000;j>0;j--);
}
void do_irq(void)
{
	static int a = 1;
	int irq_num;
	printf("num %s\n",CPU0.ICCIAR);
	irq_num = CPU0.ICCIAR&0x3ff;  //获取中断号
	switch(irq_num)
	{
	case 57:
		printf("in the irq_handler\n");
			if(a)
				led(0xf,1);
			else
				led(~0xf,0);
			a = !a;
			EXT_INT41_PEND = EXT_INT41_PEND |((0x1 << 1)); //清GPIO中断标志位
			ICDICPR.ICDICPR1 = ICDICPR.ICDICPR1 | (0x1 << 25); //清GIC中断标志位
		break;
	}
	CPU0.ICCEOIR = CPU0.ICCEOIR&(~(0x3ff))|irq_num; //清cpu中断标志位
}
/*
 *  裸机代码，不同于LINUX 应用层， 一定加循环控制
 */
int main (void)
{
	GPX1.CON =GPX1.CON & (~(0xf << 4)) |(0xf << 4); //配置引脚功能为外部中断
	GPX1.PUD = GPX1.PUD & (~(0x3 << 2));  //关闭上下拉电阻
	EXT_INT41_CON = EXT_INT41_CON &(~(0xf << 4))|(0x2 << 4); //外部中断触发方式
	EXT_INT41_MASK = EXT_INT41_MASK & (~(0x1 << 1));  //使能中断
	ICDDCR = 1;  //使能分配器
	ICDISER.ICDISER1 = ICDISER.ICDISER1 | (0x1 << 25); //使能相应中断到分配器
	ICDIPTR.ICDIPTR14 = ICDIPTR.ICDIPTR14 & (~(0xff << 8))|(0x1 << 8); //选择CPU接口
	CPU0.ICCPMR = 255; //中断屏蔽优先级
	CPU0.ICCICR = 1;   //使能中断到CPU
	 
	while(1)
	{
 
	}
   return 0;
}
 
