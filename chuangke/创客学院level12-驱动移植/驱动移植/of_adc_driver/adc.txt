ADC驱动编写分析:

需求:
通过ADC读出电压值

(1)查阅原理图 
	 滑动变阻器直接接到了exynos4412的ADC控制器上,如果想读出滑动变阻器上的电压值
	 我们只需要设置ADC控制器
		
		
(2)在Linux 下编写ADC控制器驱动
	 总线，设备，驱动     
  
  总线类型
  	platform bus 
  	
  第一步:注册设备
  设备树的形式呈现，操作系统解析完设备树的节点之后，会根据这个节点的状态，将设备添加到对应的总线上
  
  adc@126c0000{
		compatible = "Samsung,exynos4412-adc";
		reg        = <0x126c0000 0x20>;  解析成platform resource : IORESOURCE_MEM
		
		interrupt-parent = <&combiner>;  
		interrupts = <10 3>;             解析成platform resource : IORESOURCE_IRQ
		interrupt-names = "adc";
		
		clocks    = <&clock 326>;
		clock-names = "adc";             解析成时钟信息
		
		adc-io-channer = <3>;
		
		status    = "okay";
	};
	
	最终在platform bus,以platform_device 结构体呈现	
  	
  第二步:注册驱动 	
  <1>填充platform_driver
  	 [1]name 
  	 [2]probe     ---> 和设备匹配成功之后调用
  	 [3]remove    ---> 和设备分离之后调用
  	 [4]id_table  ---> 设设备的名字匹配
  	 [5]of_match_table -> 和设备树的compatible指定的名字匹配
  	 
  <2>注册驱动
  	 platform_register_driver 
  	 
 
  第三步:xxxx_probe 实现
  [1]获取资源
  	 <1>寄存器资源
  	 <2>中断资源
  	 
  [2]注册字符设备 ------------> 向应用层提供操作硬件的函数接口
     <1>分配cdev结构体对应的内存空间(一般是在分配自己定义的设备结构体，顺带把它分配了)
     <2>初始化cdev
     		cdev_init  -----------> 让cdev的成员记录函数接口所在的结构体(struct file_operations)
     		
     <3>获取设备号
     	  [1]静态注册
     	  [2]动态分配
     	  
     <4>添加字符设备
     	  cdev_add
     	  
     <5>创建设备节点
     	  [1]创建类
     	  	 class_create
     	  [2]创建设备
     	  	 device_create	  	  		
  		   
   	 
  第四步:
  		 具体实现操作硬件函数接口
  		 常用的函数接口:
  		 xxxx_open 、xxx_release 、 xxx_read 、 xxx_write 、xxx_ioctl
  		   
 
 
       xxxx_read()
       {
       		  判断条件是否满足(是否已经有数据)
       		  如果没有数据，则阻塞当前的进程
       		  如果有数据，则读取数据，拷贝到用户空间
       } 