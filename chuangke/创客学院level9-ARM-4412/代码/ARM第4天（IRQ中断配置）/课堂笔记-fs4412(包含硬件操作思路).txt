/**************************************
可以结合实验手册来和下面的硬件操作思路，进行
分析操作
****************************************/
【硬件驱动实现】
[1] 用途
    
[2] 原理
    1. 设备如何工作？
       www.google.com
       www.bing.com
       datasheet
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图)
       (2) MCU控制器原理(看datasheet)
       w
[3] 实现哪些功能?
    1. 实现哪些参数支持?
    2. 实现哪些功能?
    
[4] 硬件如何驱动?
    1. 提出问题
       (1) muxed
       (2) clk
       (3) 参数设置
       (4) 功能
    
    2. 解决问题
       (1) 浏览datasheet(95%)
           1. overview
           2. 各个功能的标题
           3. 图
           4. 寄存器
              1. 先寄存器表中的说明，猜测一下每个寄存器的功能
              2. 详细的
        
       (2) 看datasheet正文部分(3%)
           1. 验证看寄存器列表得出来的答案是否正确
           2. 问题解答
        c
       
       (3) 看厂家demo程序
           1. 厂家的裸机程序
           2. Linux里面的驱动
    
[4] 编码
    1. 规划(安排一下程序结构)
       (1) 初始化
       (2) 参数设置
       (3) 功能
       (4) 退出
    
    2. 编码(写程序)
    3. 调试(运行程序，修改程序)

[led]
[1] 用途
    led on
    led off
    
[2] 原理
    1. 设备如何工作？
       发光二极管
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图) 
           GPX2_7拉高, led2亮
           
       (2) MCU控制器原理(看datasheet)
           1. muxed
              被多个内部硬件电路控制的外部管脚称多功能管脚
              
           2. gpio(general purpose input output)
              可以控制一根外部管脚的电路，可以输出高低电平，可以检测外部管脚电平
              
[3] 实现哪些功能?
    1. 实现哪些参数支持?
       无
       
    2. 实现哪些功能?
       led on
       led off
      
[4] 硬件如何驱动?
    1. muxed
       如何让GPX2_7管脚被gpio控制?
       GPX2CON[28:31](0x11000C40) = 0b0001
       
    2. clk
       无
       
    3. 参数设置
       无
       
    4. 功能
       如何拉高GPX2_7管脚？
       GPX2DAT[7](0x11000C44) = 0b1
       
       如何拉低GPX2_7管脚？
       GPX2DAT[7] = 0b0
       
[5] 编码
    1. 初始化
       GPX2CON[28:31](0x11000C40) = 0b0001
       *((volatile unsigned int *)0x11000C40) &= ~(0xf << 28);
       *((volatile unsigned int *)0x11000C40) |= 0x1 << 28;
       
        xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx        原有寄存器的值
        0001 xxxx xxxx xxxx xxxx xxxx xxxx xxxx        希望目标值
        
        xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx
       &0000 1111 1111 1111 1111 1111 1111 1111
       ----------------------------------------
        0000 xxxx xxxx xxxx xxxx xxxx xxxx xxxx        清0
       |0001 0000 0000 0000 0000 0000 0000 0000
       ----------------------------------------
        0001 xxxx xxxx xxxx xxxx xxxx xxxx xxxx        或1
       
        ~1111 0000 0000 0000 0000 0000 0000 0000       0xf << 28
        ----------------------------------------
         0000 1111 1111 1111 1111 1111 1111 1111
       
       GPX2DAT[7](0x11000C44) = 0b1
       *((volatile unsigned int *)0x11000C44) |= 0x1 << 7;
        
    2. 功能
       led on
       GPX2DAT[7](0x11000C44) = 0b1
       
       led off
       GPX2DAT[7](0x11000C44) = 0b0
       *((volatile unsigned int *)0x11000C44) &= ~(0x1 << 7);
       
[UART]
[1] 用途
    PC<---->开发板
    
[2] 原理
    1. 设备如何工作？
       (1) 管脚
           RXD
           TXD
           GND
           RTS(Request To Send)
           CTS(Clear To Send)
           
       (2) 协议原理(UART协议／流控／break／loop back／timeout)
           
       (3) 电器标准
           RS232
           RS485
           
       (4) 校验位
           奇偶校验
           不
           强制0
           强制1
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图) 
                                                  开发板   
           PC<--->USB HOST<--->USBtoRS232<-------->RS232<--->UART2
           
       (2) MCU控制器原理(看datasheet)
           UART
           
[3] 实现哪些功能?
    1. 实现哪些参数支持?
       bps: 115200
       数据位: 8
       校验位: 不
       停止位: 1
       
    2. 实现哪些功能?
       read
       write
       
[4] 硬件如何驱动？
    1. muxed
       如何让RXD2/TXD2管脚被UART2控制?
       // RXD2
       GPA1CON[0:3] = 0b0010
       
       // TXD2
       GPA1CON[4:7] = 0b0010
       
    2. clk
       (1) PLL-->on/off-->UART?
           100M
           
       (2) bps?
           div = uart_clk/bps/16 - 1 = 100M/115200/16 - 1 = 53(0x35)
           UBRDIV[0:15] = 0x35;
           UFRACVAL[0:3] = 16 * 0.25 = 4
       
    3. 参数设置
       (1) 如何设置数据位为8bit？
           // 8bit data
           ULCON[0:1] = 0b11
           
       (2) 如何设置校验位不校验?
           // no check
           ULCON[3:5] = 0b000
           
       (3) 如何设置停止位为1？
           // 1bit stop
           ULCON[2] = 0b0
       
    4. 功能
       (1) 如何实现发送?
           如何关闭fifo?
           // disable fifo
           UFCON[0] = 0b0
           
           如何设置polling方式?
           // polling for transfer
           UCON[2:3] = 0b01
           
           如何将发送的数据写入fifo?
           // write fifo
           UTXH[0:7] = data;
           
           如何判断数据发送完成？
           if (UTRSTAT[1] == 0b1)
           
       (2) 如何实现接收?
           如何设置polling方式?
           // polling for receive
           UCON[0:1] = 0b01
           
           如何判断fifo中有数据?
           if (UTRSTAT[0] == 0b1)
           
           如何读fifo中的数据？
           // read fifo
           data = URXH[0:7];
           
       (3) 没想到
           // disable AFC
           UMCON[4] = 0b0
           
           // RTS active
           UMCON[0] = 0b1 
 
[5] 编码
    1. 初始化
        // RXD2
       GPA1CON[0:3] = 0b0010
       
       // TXD2
       GPA1CON[4:7] = 0b0010
       
       // bps 115200
       UBRDIV[0:15] = 0x35;
       UFRACVAL[0:3] = 16 * 0.25 = 4
       
       // data 8bit
       ULCON[0:1] = 0b11
           
       // no check
       ULCON[3:5] = 0b000
           
       // stop 1bit
       ULCON[2] = 0b0
       
       // disable fifo
       UFCON[0] = 0b0
       
       // polling for transfer
       UCON[2:3] = 0b01
       
       
       // polling for receive
       UCON[0:1] = 0b01
       
       
       // disable AFC
       UMCON[4] = 0b0

       // RTS active
       UMCON[0] = 0b1       
    2. 参数设置
       无  
    3. 功能
       write
       // write fifo
       UTXH[0:7] = data;
       		
       // wait finish
       while (!(UTRSTAT[1] == 0b1));
       
       read
       // wait for data
       while (!(UTRSTAT[0] == 0b1));
       
       // read fifo
       data = URXH[0:7];
       
    4. 退出
    
[中断控制器]
[1] 用途
    见《中断控制器.docx》
    
[2] 原理
    1. 设备如何工作？
       www.google.com
       www.bing.com
       datasheet
       见《中断控制器.docx》
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图)
           key2没有按下时, UART_RING(GPX1_1)管脚为高电平，按下后，它直接接地，所以会变成低电平，因此可以通过下降沿或低电平检测按键按下
           
       (2) MCU控制器原理(看datasheet)
           见《中断控制器.docx》
       
[3] 实现哪些功能?
    1. 实现哪些参数支持?
       无
       
    2. 实现哪些功能?
     d
    
[4] 硬件如何驱动?
    1. muxed
       如何配置GPX1_1(EINT9 spi 25 id 57)为中断控制器控制？  
       // muxed
       GPX1CON[4:7] = 0b1111  
       
    2. clk
       无
       
    3. 参数设置
       (1) 如何设置中断促发极性？(trigger) 
           // falling
           EXT_INT41_CON[4:6] = 0b010           
 
       (2) 如何选择中断处理的CPU为CPU0?
           // mask priority
           ICCPMR_CPU0[0:7] = 0xff             

           // target cpu0
           ICDIPTR14[8:15] = 0b1               

       (3) 如何选择中断处理类型为IRQ?
           // no secure
           ICDISR_CPU[25] = 0b1               

       
    4. 功能
       (1) 如何使能中断?
           1. muxed
              EXT_INT41_MASK[1] = 0b0          

           2. distributor
              ICDDCR[0] = 0b1                  
              ICDISER_CPU[25] = 0b1

           3. cpu0 interface
              ICCICR_CPU0[0] = 0b1             

       (2) 如何获取中断源(确认激活中断)?
             57 = ICCIAR_CPU0[0:9]             

       (3) 如何清除中断锁存?
           1. muxed
              EXT_INT41_PEND[1] = 0b1            

           2. distributor
              ICDICPR1_CPU[25] = 0b1            

           3. cpu0 interface
              ICCEOIR_CPU0[0:9] = 57           
              

        
[4] 编码
    1. 初始化
       // muxed
       GPX1CON[4:7] = 0b1111 
       
       // falling
       EXT_INT41_CON[4:6] = 0b010          0x1100_0E04 

       // mask priority
       ICCPMR_CPU0[0:7] = 0xff             0x1048_0004

       // target cpu0
       ICDIPTR14[8:15] = 0b1               0x1049_0838

       // no secure
       ICDISR1_CPU0[25] = 0b1                0x1049_0080

       // enable for muxed
       EXT_INT41_MASK[1] = 0b0             0x1100_0F04

       // enable for distributor
       ICDDCR[0] = 0b1                     0x1049_0000
       ICDISER1_CPU[25] = 0b1

       // enable for cpu0 interfacex
       ICCICR_CPU0[0] = 0b1                0x1048_0000
       
    2. 功能
       void do_irq(void)
       {
           int irq_id;

           irq_id = ICCIAR_CPU0[0:9];
           switch (irq_id) {
               case 57:
                    key_isr();
                    // clear interrupt for muxed
                    EXT_INT41_PEND[1] = 0b1          0x1140_0F44
                    
                    // clear interrupt for distributor
                    ICDICPR1_CPU0[25] = 0b1            0x1049_0280
                    break;

               default:
                    break;
           }
           
           // clear interrupt for cpu interface
           ICCEOIR_CPU0[0:9] = irq_id                 0x1048_0010

       }
       
      void key_isr(void)
      {
      	printf("key2 press\n");
      }
      
[RTC]
[1] 用途
    计时功能--类似于电子表
    闹钟
    
[2] 原理
    1. 设备如何工作？
       crystal + 计时电路
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图)
            接32.768k晶振<--->电源管理芯片<--->XrtcXTI
           
       (2) MCU控制器原理(看datasheet) 
           设置时间
           读取时间
           
[3] 实现哪些功能?
    1. 实现哪些参数支持?
    2. 实现哪些功能?
       设置时间(时分秒)
       读取时间(时分秒)
       
[4] 硬件如何驱动? 
    1. muxed
       无
       
    2. clk
       32.768k 但不需要设置
       
    3. 参数设置
       无
       
    4. 功能
       如何设置时间(时分秒)?
       RTCCON[0] = 0b1
       
       BCDSEC = ((second / 10) << 4) | (second % 10);
       BCDMIN = ((minute / 10) << 4) | (minute % 10);
       BCDHOUR = ((hour / 10) << 4) | (hour % 10);
       
       RTCCON[1] = 0b0
       
       如何读取时间(时分秒)？
       second = BCDSEC & 0x7f;
       second = ((second >> 4) & 0xf) * 10 + (second & 0xf);
       
       minute = BCDMIN & 0x7f;
       minute = ((minute >> 4) & 0xf) * 10 + (minute & 0xf);
       
       
       hour = BCDHOUR & 0x3f;
       hour = ((hour >> 4) & 0xf) * 10 + (hour & 0xf);
       
       十进制如何转成BCD码?
       例:
       19         BCD: 0x19
       ((hour / 10) << 4) | (hour % 10)
       
       hour = ((hour_bcd >> 4) & 0xf) * 10 + (hour_bcd & 0xf)
       
[5] 编码
    1. 功能
       如何设置时间(时分秒)?
       RTCCON[0] = 0b1
       
       BCDSEC = ((second / 10) << 4) | (second % 10);
       BCDMIN = ((minute / 10) << 4) | (minute % 10);
       BCDHOUR = ((hour / 10) << 4) | (hour % 10);
       
       RTCCON[1] = 0b0
       
       如何读取时间(时分秒)？
       second = BCDSEC & 0x7f;
       second = ((second >> 4) & 0xf) * 10 + (second & 0xf);
       
       minute = BCDMIN & 0x7f;
       minute = ((minute >> 4) & 0xf) * 10 + (minute & 0xf);
       
       
       hour = BCDHOUR & 0x3f;
       hour = ((hour >> 4) & 0xf) * 10 + (hour & 0xf);
    
[WDT]
[1] 用途
    防止系统死机
    
[2] 原理
    1. 设备如何工作？
       见《看门狗.docx》
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图)
           无(看门狗是4412的内部设备)
            
       (2) MCU控制器原理(看datasheet)
           见《看门狗.docx》
           
[3] 实现哪些功能?
    1. 实现哪些参数支持?
    2. 实现哪些功能?
       看门狗，死机复位
       
[4] 硬件如何驱动?
    1. muxed
       无
       
    2. clk
       (1) PLL-->pclk-->on/off-->watchdog?
                 100M
                 
       (2) 如何设置prescaler？
           // prescaler 256
           WTCON[8:15] = 0xff          0x10060000
           
       (3) 如何设置divider?
           // divider 128
           WTCON[3:4] = 0b11           0x10060000
       
    3. 参数设置
       无
       
    4. 功能
       (1) 如何设置timer?
           // timer 1s
           WTCNT[0:15] = 3052
           
       (2) 如何使能reset signal generator？
           // enable for reset
           WTCON[0] = 0b1              0x10060000
           
           // enable for timer
           WTCON[5] = 0b1              0x10060000
           
[4] 编码
    1. 初始化w
       // prescaler 256
       WTCON[8:15] = 0xff          0x10060000
       
       // divider 128
       WTCON[3:4] = 0b11           0x10060000
       
       // timer 1s
       WTCNT[0:15] = 3052
       
       // enable for reset
       WTCON[0] = 0b1              0x10060000
           
       // enable for timer
       WTCON[5] = 0b1              0x10060000
       
    2. 功能
       // feed
       WTCNT[0:15] = 3052
       
[PWM]
[1] 用途
[2] 原理
    1. 设备如何工作？
       见《PWM.docx》
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图)
           beep为交流蜂鸣器，需要不断通电断电产生震动，从而产生声音，通断电频率就等于声音频率
           
       (2) MCU控制器原理(看datasheet)
           见《PWM.docx》
           
[3] 实现哪些功能?
    1. 实现哪些参数支持?
    2. 实现哪些功能?
       控制交流蜂鸣器发出滴...(20-20k, 2k(50%))
       
[4] 硬件如何驱动?
    1. muxed
       如何设置GPD0_0被PWM控制?
       // TOUT0
       GPD0CON[0:3] = 0b0010
       
    2. clk
       (1) PLL-->PCLK--on/off-->PWM
                 100M
                 
       (2) 如何设置prescaler?
           // prescaler 256
           TCFG0[0:7] = P - 1 (0xff)           0x139D_0000
           
       (3) 如何设置divider？
           // divider 16
           TCFG1[0:3] = D(0x)0b0100            0x139D_0004
       
    3. 参数设置
    4. 功能
       (1) 如何设置timer?
       
       		 // timer
       		 TCNTB0 = pclk / P / D / 2000 = 12   0x139D_000C
       		 
           // manual load(TCNTB-->TCNT TCMPB-->TCMP) 
           TCON[1] =  0b1                      0x139D_0008
           TCON[1] =  0b0
           
           // auto reload
           TCON[3] =  0b1
           
           // enable
           TCON[0] = 0b1
           
       (2) 如何设置comparer?
           // comparer
           TCMPB0 = 6                          0x139D_0010
       
[5] 编码
    1. 初始化
       // TOUT0
       GPD0CON[0:3] = 0b0010
       
       // prescaler 256
       TCFG0[0:7] = P - 1 (0xff)           0x139D_0000
       
       // divider 16
       TCFG1[0:3] = D(0x)0b0100            0x139D_0004
       
        // timer
       	TCNTB0 = pclk / P / D / 2000 = 12   0x139D_000C
       	
       	// comparer
        TCMPB0 = 6                          0x139D_0010
       		 
        // manual load(TCNTB-->TCNT TCMPB-->TCMP) 
        TCON[1] =  0b1                      0x139D_0008
        TCON[1] =  0b0
           
        // auto reload
        TCON[3] =  0b1
           
        // enable
        TCON[0] = 0b1

     2. 功能
        on
        // enable
        TCON[0] = 0b1
        
        off
        // enable
        TCON[0] = 0b0
        
[ADC]
[1] 用途
    采集模拟信号为数字，数字型录音机、摄像机都是ADC应用
    
[2] 原理
    1. 设备如何工作？
       量化位数(分辨率 resolution)
       采样率
       微分线性误差
       积分线性误差
       量化误差
       
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图)
           adcAIN3接划动变阻器，测量划动变阻器两端的电压值
           
       (2) MCU控制器原理(看datasheet)

[3] 实现哪些功能?
    1. 实现哪些参数支持?
    2. 实现哪些功能?
       测量划动变阻器两端的电压值
       
[4] 硬件如何驱动? 
    1. muxed
       不
       
    2. clk
       (1) pll-->pclk-->on/off-->adc
                 100M
                 
       (2) 如何设置prescaler？
           // prescaler 256
           ADCCON[14] = 0b1
           ADCCON[6:13] = 0xff
           
       (3) 如何设置divider？
           无
       
    3. 参数设置
       (1) 如何设置量化位数(resolution)？
           // resolution 12
           ADCCON[16] = 0b1                 0x126C_0000
       
    4. 功能
       (1) 如何读取采样值?
           // normal
           ADCCON[2] = 0b0
           
           // enable by read
           ADCCON[1] = 0b1
           
           // channel AIN3
           ADCMUX[0:3] = 0b0011             0x126C_001C
           
           1. 如何判断采样成功?
              if (ADCCON[15] == 0b1)
              
           2. 如何读取值?
              data = ADCDAT[0:11];          0x126C_000C
              
[4] 编码
    1. 初始化
       // prescaler 256
       ADCCON[14] = 0b1
       ADCCON[6:13] = 0xff
       
       // resolution 12
       ADCCON[16] = 0b1                     0x126C_0000
       
       // normal
       ADCCON[2] = 0b0
           
       // enable by read
       ADCCON[1] = 0b1
           
       // channel AIN3
       ADCMUX[0:3] = 0b0011                 0x126C_001C
       
       // enable
       vol = ADCDAT[0:11];                  0x126C_000C
       
    2. 功能
       read
       while (!(ADCCON[15] == 0b1));
       vol = ADCDAT[0:11];
       
[I2C]
[1] 用途
    用于同一块主板上的两个芯片之间的通讯，如: TS<-->SOC sensor<--->SOC
    
[2] 原理
    1. 设备如何工作？
    2. 如何被MCU控制?
       (1) 外部控制电路原理(看原理图)
           I2C5(GPB_2 GPB_3)<--->MPU6050  看是否有上拉电阻
           
           
       (2) MCU控制器原理(看datasheet)
           见《I2C.docx》s
           
[3] 实现哪些功能?
    1. 实现哪些参数支持?
       100k
       
    2. 实现哪些功能?
       transfer/receive
       
[4] 硬件如何驱动? 
    1. muxed
       如何设置SDA和SCL被I2C5控制？
       // muxed
       GPBCON[8:11] = 0b0011
       GPBCON[12:15] = 0b0011
       
    2. clk
       (1) pclk-->on/off-->i2cs
           100M
           
       (2) 如何设置prescaler？
           // prescaler 2
           I2CCON5[0:3] = 0b1
           
       (3) 如何设置divider？
           // divider 512
           I2CCON5[6] = 0b1
    
    3. 参数
       
    4. 功能
       (1) 如何接收数据?
           // master receive
           I2CSTAT5[6:7] = 0b10
           
           1. 如何发送开始信号？
              // start
              I2CSTAT[5] = 0b1
           
           2. 如何发送地址和读标志?
              (1) 如何发送?
                  I2CDS5[0:7] = slave_addr << 1 | 1 (在数据输出使能之后)
                  
              (2) 如何确认ack?(发送成功)
                  if (I2CCON5[4] == 0b1)
              
           3. 如何接收数据?
              (1) 如何判断接收成功?
                  if (I2CCON5[4] == 0b1)
                  
              (2) 如何读取数据?
                  data = I2CDS5[0:7];
                  
              (3) 如何发送ack?(最后一个字节不用发ack，直接发停止信号)
                  有可能硬件自动发送，但是ack需要使能
              
           4. 如何发送停止信号？
              // stop
              I2CSTAT[5] = 0b0
           
       (2) 如何发送数据？
           // master transmit
           I2CSTAT5[6:7] = 0b11
           
           1. 如何发送开始信号？
              同接收
              
           2. 如何发送地址和写标志?
              (1) 如何发送?
                  I2CDS5[0:7] = slave_addr << 1 | 0  (在数据输出使能之后)
                  
              (2) 如何确认ack?
                  if (I2CCON5[4] == 0b1)
                  
              近似于接收
              
           3. 如何发送数据？
              (1) 如何写数据?
                  I2CDS5[0:7] = data                  (在数据输出使能之后)
                   
              (2) 如何确认发送完成(ack)？
                  if (I2CCON5[4] == 0b1)
           
           4. 如何发送停止信号？
              同接收
           
       (3) 其他
           // interrupt enable
           I2CCON5[5] = 0b1
           
           // ack enable
           I2CCON5[7] = 0b1
           
           // data enable
           I2CSTAT5[4] = 0b1
           
[5] 编码
    1. 初始化
        // muxed
       GPBCON[8:11] = 0b0011
       GPBCON[12:15] = 0b0011
       
       // prescaler 2
       I2CCON5[0:3] = 0b1
       
       // divider 512
       I2CCON5[6] = 0b1
       
       // interrupt enable
       I2CCON5[5] = 0b1
       
       // clear interrupt pending
       I2CCON5[4] = 0b0
       
       
    2. 参数设置
    
    3. 功能
       transfer(slave_addr, data, size)
       
       // master transmit
       I2CSTAT5[6:7] = 0b11
       
       // ack enable
       I2CCON5[7] = 0b1
       
       // data enable
       I2CSTAT5[4] = 0b1
       
       // addr
       I2CDS5[0:7] = slave_addr << 1 | 0
       
       // clear interrupt pending
       I2CCON5[4] = 0b0
       
       // start
       I2CSTAT5[5] = 0b1
       
       // ack
       while (!(I2CCON5[4] == 0b1));
       
       for (i = 0; i < size; i++) {
          // data
          I2CDS5[0:7] = data[i];
       
          // clear interrupt pending
          I2CCON5[4] = 0b0;
       
          // ack
          while (!(I2CCON5[4] == 0b1));
       }
       
       receive(slave_addr, buf, size)
       // master receive
       I2CSTAT5[6:7] = 0b10
       
       // ack enable
       I2CCON5[7] = 0b1
       
       // data enable
       I2CSTAT5[4] = 0b1
       
       // addr
       I2CDS5[0:7] = slave_addr << 1 | 1
       
       // clear interrupt pending
       I2CCON5[4] = 0b0
       
       // start
       I2CSTAT[5] = 0b1
       
       // ack
       while (!(I2CCON5[4] == 0b1));
       
       for (i = 0; i < size - 1; i++) {
         
         // clear interrupt pending
         I2CCON5[4] = 0b0
         
         // ack
         while (!(I2CCON5[4] == 0b1));
         
         // data
         data[i] = I2CDS5[0:7];
       }
       
       // disable ack
       I2CCON5[7] = 0b0
       
       // clear interrupt pending
       I2CCON5[4] = 0b0
       
       // ack
       while (!(I2CCON5[4] == 0b1))
       
       // data
       data[i] = I2CDS5[0:7];
       
       stop
       // stop
       I2CSTAT5[5] = 0b0
       
       // clear interrupt pending
       I2CCON5[4] = 0b0