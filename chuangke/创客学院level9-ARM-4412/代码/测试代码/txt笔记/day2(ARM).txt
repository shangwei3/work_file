1.交叉工具链：
  编译器相关的一套工具
  
   交叉:
   嵌入式的开发
   
   开发: ---开发环境是在PC上面
   hello.c ----> gcc hello.c ----> a.out 是对应pc的可执行文件(intel CPU)
   交叉编译器:
   可以将对应的程序编译成 目标平台上的可执行文件
   可执行文件 ---------> ARM芯片
   
2.指令
  分类:
    功能 
	寻址方式
  (1).数据指令(mov mvn)
      立即数:
	     立即数是直接放到指令中！
	     产生的规则：
		 一个八位数循环移位偶数次得到的！
		 
		 立即数合法性:
		 (0).0-255之间的数值肯定是合法的
		 (1).看 最前面的1 和 最后面的1 (注意:循环的 --一个环)
		    如果 超过了8个位，肯定就不是
		 (2).如果没有超过8个位，看这个数据放到一个8位中的话，
		     剩下低位0的个数
		     是否为偶数。
			
  (2).指令
    mov
	mvn (将操作2 取反之后给 目标寄存器) 
	    可以实现用一个小的立即数获得了一个很大的数值的效果 
		
  （3）.移位操作
  算术 和 逻辑
  区别:
      是否考虑 符号!
	  逻辑 --- 不考虑符号 无符号对待
	  算术 --- 考虑是否是有符号数 
	  
	  移位操作: 
	  考虑 空出来的位置 用什么填充
      asl & lsl (算符左移 逻辑左移) 
	           特点:
			   最低位用0填充
	  asr (算术右移)
	      特点:
		    高位用31位(最高位--符号位)来填充
		     1000 0000 
			  100 0000 0
	  lsr (逻辑右移)
	       特点：
		     高位用 0 填充
	  ror (循环右移)
	         特点:
			    移出来的低位又 放到了高位！
				每次移出来的值都会复制一份到c(进位位)位中
	  rrx (带扩展位的循环右移)
	         特点：
			    c位(进位位)充当了移位操作中的其中一个位
 (3).算术运算指令
     加法 add 
	      add r2,r1,r0 @r2 = r1+r0
	 减法 sub
	      sub r2,r1,r0 @r2 = r1-r0
	      rsb (反向减法)
		  sub r2,r1,r0 @r2 = r0-r1
	 注意：
	     (a).第二个操作数的 变化形式
		 (b).加法 和减法中 的第一个操作数 和 目的操作数 可以是同一个寄存器
	 乘法:
	     mul 
		 mla(加乘)
		 umull (64位)
		 umall (64位)
		 
 (4).位运算
     与  and
	 或  orr
	 异或eor
     位清除指令
     bic (bit clear)	 
	 
	 bic r1,r0,r2
	 注意：
	     r1 = r0 &(~r2)
	   
(5).比较指令
    cmp 
    cmn
    tst	
(6).