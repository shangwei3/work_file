【伪指令】
[1] 概念
    不是机器指令，用来控制(或指导)汇编器帮我们做一些事情，如:
    1. 变量定义
       int test = 0;
       
    2. 预处理命令
    3. 声明
        
[2] 分配内存(定义变量)
@(unsigned)char ch = 0x11; 分配一个字节的内存，并且把0x11装入到内存
ch:
	.byte 0x11

@(unsigned)short sh = 0x1234; 分配两个字节的内存，并且把0x1234装入到内存
sh:
	.short 0x1234

@(unsigne)int it = 0x12345678; 分配四个字节的内存，并且把0x12345678装入到内存
it:
	.word 0x12345678

@(unsigne)long lg = 0x12345678; 分配四个字节的内存，并且把0x12345678装入到内存
lg:
	.long 0x12345678

 @(unsigned) long long ll = 0x1234567812345678; 分配四个字节的内存，并且把0x1234567812345678装入到内存
ll:
	.quad 0x1234567812345678

@float ft = 3.2f; 分配四个字节的内存，并且把3.2f装入到内存fq
ft:
	.float 0f3.2a

@char str[] = "abc"; 分配四个字节的内存，并且把"abc\0"装入到内存
str:
    .string "abc"

@char asc[] = {'a', 'b', 'c'}; 分配三个字节的内存，并且把"abc"装入到内存
asc:
	.ascii "abc"

[3] 宏
    1. 定义
@#define xchg(regs, regd) \
do {                      \
	int tmp = (regs);     \
	(regs) = (regd);      \
	(regd) = (tmp);       \
} while (0)

.macro xchg regs, regd
	mov r0, \regs
	mov \regs, \regd
	mov \regd, r0
.endm
     2. 使用

xchg r1, r2

       
[4] LDR & ADR
    1. LDR
       (1) 语法
           LDR R0, =const               @const-->R0
           
       (2) 原理 
           [常数]
           ldr R0, =0x1234              @0x1234-->R0
           @addr: ldr R0, [PC, #X]
           ...
           @addr + 8 + X: 0x1234
           
           [label]
           ldr R0, =label
           LDR R0, =label               @label(代表的地址)-->R0
           @addr: ldr R0, [PC, #X]
           ...
           @addr + 8 + X: label代表的地址
           label的寻址方式是绝对寻址
           
    2. ADR
       (1) 语法
           ADR R0, label               @label(地址)-->R0
               
       (2) 原理
           ADR R0, label               @label(PC -(+) X)-->R0
           label:                      @(R0中得到的值跟指令运行的位置和X(编译时确定下来的)有关)
           ^
           |
           |
           X         
           |
           |
           V
           SUB R0, PC(执行位置 + 8), #(X + 8)
           label的寻址方式是相对寻址
           
[5] 指定指令集
    .arm   这条伪指令开始的指令全部是arm指令
    .thumb 这条伪指令开始的指令全部是thumb指令
    
[6] 定义段
    .section .text / .text      定义代码段
    .section .data / .data      定义数据段
    .section .bss / .bss        定义未初始化的数据段
    .section 段名               自定义段
    
[7] 对齐
    .align n                    2^n对齐
    例:
    .align 2                    4字节对齐
    .align 3                    8字节对齐
   
[8] 指定入口地址
    在链接脚本中用ENTRY(_start)
     
[9] .global/.globl
    汇编文件中，没有.globl声明的标号为本文件内使用, 相当于C语言中加了static的全局变量
    例:
    glb:											@static int glb = 0x12;
    	.word 0x12
    
    .globl glb
    glb:											@int glb = 0x12;
    	.word 0x12
    	
[10] .end
     汇编文件结束符号
     
[11] @ 或 #
     @ 注释
     # 行注释(#之前只能有空格和TAB)
     
[12] 局部标号(不能跨段)
     1:                             局部标号(0 - 99)，只能用于本文件内							
       b 1b                         b(back)表示阅读代码时向上且必须小写
                                    这条指令表示向上跳转到离它最近的标号

       b 1f                         f(front)表示阅读代码时向下且必须小写
                                    d这条指令表示向下跳转到离它最近的标号
     1:

【C & 汇编混合编程】
[1] 为什么要混合编程?
    1. 只用汇编, 可以实现所有要实现的功能, 但是工作量太大
    2. 只用C语言, 无法实现所有要实现的功能, 因为下列情况必须用到汇编:
       (1) C语言无法实现的功能(比如：启动代码、中断异常例程实现、开关中断), 必须用汇编
       (2) 对效率要求比较高的代码, 必须用汇编
    
[2] 混合编程有哪几种情况？
    1. 汇编程序中, 访问C语言程序中的变量(全局变量)
    2. C语言程序中, 访问汇编程序中的数据
    3. 汇编程序中, 调用C语言程序中的函数
    4. C语言程序中, 调用汇编程序中的子程序
    5. C函数中，嵌入汇编程序
    
[3] 汇编程序中, 如何访问C语言程序中的变量？
    例：
    在C语言中，定义全局变量:
    int test = 6;
    // test:
    // 	.word 6
    
    在汇编代码中, 访问test:
    @访问test
	  LDR R0, =test

	  @读test
	  LDR R1, [R0]

	  @写5到test
	  MOV R1, #5
	  STR R1, [R0]
    
[4] C语言程序中, 如何访问汇编程序中的数据？
    例:
    在汇编代码中，定义全局变量：
    @int test = 5;
    .globl test
    test:
      .word 5
      
    在C语言中，访问test:
    extern int test;
    
    // 读test
	  int tmp = test;

	  // 写test
	  test = 6;

[5] 汇编程序中, 如何调用C语言程序中的函数？
    例：
    C语言程序中, 定义max函数：
    int max(int x, int y)
    {
        return x > y ? x : y;
    }
    
    汇编程序中, 调用C语言函数:
    tmp = max(5, 6);
    
    1. 实参传给形参
       形参存储在哪里?
       (1) 形参的前4个参数存储在R0-R3
       (2) 从第5个参数开始存储在栈
       
       实参如何传给形参?
       mov r0, #5
       mov r1, #6
       
    2. 保存返回地址并跳转到max执行
       bl max
       
    3. 接收函数返回值
       返回值存放在哪里？
       (1) 返回32bit的整数时, 返回值存放在R0中
       (2) 返回64bit的整数时, 返回值存放在R0和R1中
       
       如何接收返回值?
       mov r4, r0
    
[6]  C语言程序中, 如何调用汇编程序中的子程序？
     例:
     汇编程序中, 子程序的实现和声明： 
@int max(int x, int y)
@{
@ 1. 接收数据(形参在哪儿?)
.global max
max:
	push {r4}

@ 2. 执行(局部变量应该存哪儿？)
@	 register int tmp = x > y ? x : y;
	cmp r0, r1
	movlt r4, r1
	movge r4, r0

@3. 返回(返回值存哪儿？)
@  return tmp;
@}
	mov r0, r4
	pop {r4}
	mov pc, lr
		   
    C语言程序中, 调用汇编函数：
    extern int max(int x, int y);
    tmp = max(5, 6);
    
+---------------+
|     形参      |
+---------------+
|   返回地址    |        main
+---------------+
|    局部变量   |        R4 - R8
+---------------+------------------
|               | x
+---------------+
|               | y
+---------------+         max
|    返回地址   |        R4 - R8
+---------------+
|               | tmp
+---------------+  
    
[7] 总结(ATPCS 详细参考：IHI0042E_aapcs.pdf)
    int max(int x, int y)               前四个形参放在R0-R3，超过四个，从第五放入栈
    {
    	register int i, j, h,.......      局部变量R4-R8c
    	
    	return i;                         返回值放在R0和R1(超过32bit)
    }
    1. 形参的个数最好不大于4个
    2. 局部变量的数量不大于7个
    3. 返回值的位数不要超过机器字长(寄存器的位数/总线数据线数量/ALU运算数据的位数/总线地址线数量)
    
[7] C函数中，如何嵌入汇编程序?
    例：
     int add(unsigned int a, unsigned int b)
     {
          int sum = 0;
          
          sum = a + b;
          
          return sum;
     }
     
     嵌入汇编语法，如下：
     int add(unsigned int a, unsigned int b)
     {
          int sum = 0;
          
          asm volatile (
             指令部                                            汇编指令，指令之间必须用"\n"分隔
             : 输出部                                          输出汇编程序结果给C语言变量                               
             : 输入部                                          从C语言变量输入数据给汇编程序
             : 破坏部                                          汇编中被破坏的内存或寄存器
          );
          
          return sum;
     }
     
     实现指令部:
     int add(unsigned int a, unsigned int b)
     {
          int sum = 0;
          
          asm volatile (
              "add sum, a, b\n"                              
              : 输出部
              : 输入部
              : 破坏部
          );
         
          return sum;
     }

     
     实现输出部：
     int add(unsigned int a, unsigned int b)
     {
          int sum = 0;
          
          asm volatile (
              "add r4, a, b\n"
              "mov %0, r4\n"
              : "=r"(sum)                                        "r" 表示需要给%0分配寄存器 
                                                                 "=" 表示对sum的操作权限是只写
              : 输入部
              : 破坏部
          );
          
          return sum;
     }
     
     实现输入部：
     int add(unsigned int a, unsigned int b)
     {
          int sum = 0;
          
          asm volatile (
              "add r4, %1, %2\n"
              "mov %0, r4\n"
              : "=r"(sum)
              : "r"(a), "r"(b)                                     "r" 表示参数处应该是寄存器
                                                                   对a和b的操作权限为只读
              : 破坏部
          );
          
          return sum;
     }
     
     实现破坏部:
     int add(unsigned int a, unsigned int b)
     {
          int sum = 0;
          
          asm volatile (
              "add r4, %1, %2\n"
              "mov %0, r4\n"
              : "=r"(sum)
              : "r"(a), "r"(b)
              : "r4"                                               r4寄存器遭到了破坏                
          );
          
          return sum;
     }
     
     破坏部为内存的例子(编译时，优化级别修改为2):
     int sum = 0;
     
     int add(unsigned int a, unsigned int b)
     {
          sum += 1;
          
          // 观察有这句话，和没有这句话的代码区别
          asm volatile ("" :::"memory");
          
          sum += 1;

          return sum;
     }

    
