bootloader(u-boot)
linux kernel
挂载根文件系统
启动init进程
----------------------------------------------------------------------------------------
(1)解析init.rc文件
		action_list:全部的action(关联的是命令)  services_list:全部服务(一个应用程序:进程)

(2)从action_list中，寻找了一些需要首先执行的action: eraly-init,init,late-init
    ,将这些action添加到action_queue(存放的就是需要执行的action)
    
   init进程自己构建的新的action,然后添加到了action_list和action_queue
   
   问题:为什么需要构建新的action?
   回答:因为init.rc文件中并没有我们需要的action,但是这些action必须存在，所以就构建了
   	    新的action 
   	    
(3)进入了死循环
	 <1>从action_queue中，提取一个action,然后执行这个action关联的命令
	 <2>查看是否有需要重新启动的服务，如果有则启动这些服务
	 <3>通过poll函数，探测一些文件描述符是否就绪
	    keychord_fd : 用户是否按下了一些组合键
	    propery_fd  : 是否有其他的进程请求修改属性的值
	    signal_fd   : 子进程结束的时候，回收僵尸态子进程，如果需要重新启动，则添加重新启动的
	    						  标志，并且执行这个服务关联的onrestart命令
	     						  	       	    
需求:如何在Android系统中，添加一个自己的服务，并且让它一直运行，如果被杀死后，则重新启动
		 它?
		    	     
解决方案:
		 (1)编写你的服务程序
		 
		 (2)编译进Android系统中
		 	
		 (3)在/out/target/product/fspad-733/root/init.rc中添加你的服务
		 
		 		service  服务名称   服务对应程序所在的绝对路径
		 		class  main或core
		 		
		 		例如:
		 		service  helloword  /system/bin/hello
		 		class    main 
		 		
		 (4)需要将更新过的目录对应的镜像文件重新生成
     
		    root  ---->ramdisk.img
		    [1]make ramdisk-nodeps
		    [2]make bootimage-nodeps
		    
		    system---->system.img	
		 		[1]make snod	    	    
		 		
		 		
		 	(5)打包生成最终的镜像文件
		 		 pack -d
		 		 
		 		 bootloader.fex + boot.img(kernel + ramdisk.img) + system.img + recovery.img = lichee/tools/pack/sun8iw3p1_android_fspad-733_card0.img)
		 		 
		 	(6)烧写镜像到设备中
		 	
		 	(7)查看自己的服务是否被运行
		 	   [1]adb shell  登录shell
		 	   [2]查看init.rc文件，是否有我们的服务
		 	   [3]通过ps | grep 服务的名称
		 	   [4]logcat | grep "self tag"	 
		 	   
		 	   
-------------------------------------------------------------------------------------------
java世界进入

1.init进程启动zygote服务进入java世界
	[1]创建Java虚拟机
	[2]加载了zygoteInit类,然后运行它
	   [1]加载资源
	   [2]创建了SystemServer服务
	   [3]等待别人发起创建新进程的请求
	   
	   
SystemServer服务运行的时候:
[1]创建了Android App运行时候所需要的所有服务
[2]向Activity Manager Server发起了启动HOME APP应用程序	   
			   	 	   	 