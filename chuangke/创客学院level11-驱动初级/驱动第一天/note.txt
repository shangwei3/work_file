一 Linux 设备驱动开发

(1)Linux 设备驱动框架
(2)自己动手编写驱动
(3)简单


二 Linux 驱动 VS 裸机驱动

1.裸机驱动
	直接操作控制器，让硬件工作，实现硬件功能和如何使用这些功能是在一起
	
2.Linux 驱动
	因为操作系统中，同类硬件设备一般只有一个，但是想操作硬件设备的进程会很多。这就带来一个
	问题，应用层如何访问硬件设备以及多个人同时访问的时候，如何解决并发问题。
	
	Linux 驱动本质是向应用层提供访问硬件设备的函数接口，也就是说驱动只是提供硬件的
	功能函数接口，而如何使用这些功能由应用层代码去做。
	
	注意:Linux下的驱动提供函数接口，必须遵从设备驱动的框架,便于Linux操作系统对设备进行管理。
		
		
	Linux 驱动 = Linux 驱动框架 + 裸机操作
	
三 Linux 设备分类

1.字符设备 
  键盘，鼠标, ... 

2.块设备
  u盘，emmc,硬盘,....
  
3.网络设备	
  网卡 

注意:
(1)字符设备和块设备驱动在应用存在设备文件和驱动对应。
(2)网络设备驱动在应用层存在是网络接口 (ifconfig命令可以查看)  

四 在Linux 内核中添加代码

按照Linux 规定模块的形式添加代码

#include <linux/init.h>
#include <linux/module.h>

MODULE_LICENSE("GPL v2");

static int hello_init(void)
{
	printk("Hello linux module init!\n");
}

static void  hello_exit(void)
{
	printk("Hello linux module exit!\n");
}

module_init(hello_init);
module_exit(hello_exit);


五 模块Makefile编写

核心思想:
	找到Linux内核的编译系统，使用它的编译系统将自己的代码编译成模块

ifeq ($(KERNELRELEASE),)

KERNEL_BUILD=/lib/modules/$(shell uname -r)/build  记录Linux内核的编译系统路径
MODULE_PATH =$(shell pwd)

module:
	$(MAKE) -C $(KERNEL_BUILD) M=$(MODULE_PATH) modules 

clean:
	$(MAKE) -C $(KERNEL_BUILD) M=$(MODULE_PATH) clean
	
else
	obj-m = hello_module.o
endif	

---------------------------------------------------------------
1.模块的编写
2.模块的编译
3.模块的加载和卸载
4.模块的参数
5.模块的符号导出
---------------------------------------------------------------

六 设备号 

1.设备号记录在设备文件中
  设备号(32bit) = 主设备号(12bit) + 次设备号(20bit)
  
  主设备号 : 代表这一类设备的驱动程序
  次设备号 : 为了区分同类型设备的不同设备 
  (3个u盘设备，都是u盘设备，但是通过次设备号区分不同的u盘)
  

七 应用层访问驱动程序


struct inode : 描述设备文件的属性信息，只需要分配一次 (记录的静态信息)
struct file  : 当打开设备文件的时候，就会分配一次		 (记录动态信息,例如:文件偏移量)

注意：
struct file结构体对应就是我们的文件描述符


1.如何找到驱动程序
	通过设备文件（记录设备号）就可以对应的驱动程序
   

2.open ---->/dev/设备文件
							|
							|
						设备号
							----------->驱动程序
														 ----->操作硬件设备的函数接口
																							 ----------->记录在struct file结构体
																																		
3.字符设备描述结构体
	struct cdev
	
	如何根据自己的字符设备，设计结构体进行描述?
	struct xxx_device{
			struct cdev  cdev;//通用字符设备信息描述
			自己字符设备信息
	};																					    
  
  
八 写字符设备驱动，驱动需要包含哪些信息

1.设备号
	   |
	   |
2.struct cdev
	   |
	   |
	   | 
3.一组函数接口 -----> struct file_operations